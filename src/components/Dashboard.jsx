import React, { useState, useEffect } from 'react';
import { RefreshCcw } from 'lucide-react'; // ImportaÃ§Ã£o do Ã­cone de refresh

// --- NOVOS ESTILOS PARA CARDS MAIS COMPACTOS E MINIMALISTAS ---
const compactCardStyle = {
Â  backgroundColor: '#ffffff',
Â  borderRadius: '8px', // Borda mais suave
Â  padding: '15px', // ReduÃ§Ã£o do padding
Â  border: '1px solid #e5e7eb', // Borda discreta
Â  boxShadow: '0 1px 3px rgba(0, 0, 0, 0.05)', // Sombra sutil
Â  transition: 'all 0.2s',
Â  display: 'flex',
Â  flexDirection: 'column',
Â  justifyContent: 'center',
Â  alignItems: 'center',
};

const valueTextStyle = {
Â  fontSize: '26px', // ReduÃ§Ã£o do tamanho da fonte para o valor
Â  fontWeight: '700',
Â  marginTop: '5px',
Â  lineHeight: '1.2',
};

const titleTextStyle = {
Â  fontSize: '12px', // ReduÃ§Ã£o da fonte do tÃ­tulo
Â  color: '#6b7280',
Â  fontWeight: '500',
Â  textTransform: 'uppercase',
Â  marginBottom: '0',
};

// --- COMPONENTE: GrÃ¡fico Circular de Progresso (Estilos adaptados) ---
const CircularProgressChart = ({ percentage }) => {
Â  const normalizedPercentage = Math.min(100, Math.max(0, percentage));
Â  const circumference = 314;
Â  const dashoffset = circumference - (normalizedPercentage / 100) * circumference;

Â  return (
Â  Â  <div style={{
Â  Â  Â  width: '100px', // Tamanho reduzido
Â  Â  Â  height: '100px', // Tamanho reduzido
Â  Â  Â  position: 'relative',
Â  Â  Â  margin: '10px auto 0',
Â  Â  Â  display: 'flex',
Â  Â  Â  alignItems: 'center',
Â  Â  Â  justifyContent: 'center',
Â  Â  }}>
Â  Â  Â  <svg
Â  Â  Â  Â  width="100"
Â  Â  Â  Â  height="100"
Â  Â  Â  Â  viewBox="0 0 120 120"
Â  Â  Â  Â  style={{ transform: 'rotate(-90deg)' }}
Â  Â  Â  >
Â  Â  Â  Â  {/* Fundo do CÃ­rculo (Track) */}
Â  Â  Â  Â  <circle
Â  Â  Â  Â  Â  cx="60"
Â  Â  Â  Â  Â  cy="60"
Â  Â  Â  Â  Â  r="50"
Â  Â  Â  Â  Â  fill="none"
Â  Â  Â  Â  Â  stroke="#f3f4f6"
Â  Â  Â  Â  Â  strokeWidth="8" // Linha mais fina
Â  Â  Â  Â  />
Â  Â  Â  Â  {/* CÃ­rculo de Progresso */}
Â  Â  Â  Â  <circle
Â  Â  Â  Â  Â  cx="60"
Â  Â  Â  Â  Â  cy="60"
Â  Â  Â  Â  Â  r="50"
Â  Â  Â  Â  Â  fill="none"
Â  Â  Â  Â  Â  stroke="#059669" // Verde mais escuro e sÃ³lido (Emerald 600)
Â  Â  Â  Â  Â  strokeWidth="8"
Â  Â  Â  Â  Â  strokeLinecap="round"
Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  transition: 'stroke-dashoffset 0.5s linear',
Â  Â  Â  Â  Â  Â  strokeDasharray: circumference,
Â  Â  Â  Â  Â  Â  strokeDashoffset: dashoffset,
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  />
Â  Â  Â  Â  {/* Texto da Porcentagem no Centro */}
Â  Â  Â  Â  <div style={{
Â  Â  Â  Â  Â  position: 'absolute',
Â  Â  Â  Â  Â  top: '50%',
Â  Â  Â  Â  Â  left: '50%',
Â  Â  Â  Â  Â  transform: 'translate(-50%, -50%)',
Â  Â  Â  Â  Â  fontSize: '18px',
Â  Â  Â  Â  Â  fontWeight: '700',
Â  Â  Â  Â  Â  color: '#059669',
Â  Â  Â  }}>
Â  Â  Â  Â  {normalizedPercentage.toFixed(1)}%
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};
// ------------------------------------------------------------------------

const Dashboard = ({ leads, usuarioLogado }) => {
Â  const [leadsClosed, setLeadsClosed] = useState([]);
Â  const [loading, setLoading] = useState(true);
Â  const [isLoading, setIsLoading] = useState(false);

Â  // ðŸ”‘ LÃ“GICA DE DATA MODIFICADA AQUI ðŸ”‘

Â  // FunÃ§Ã£o para obter o primeiro dia do mÃªs atual
Â  const getPrimeiroDiaMes = () => {
Â  Â  const hoje = new Date();
Â  Â  return new Date(hoje.getFullYear(), hoje.getMonth(), 1).toISOString().slice(0, 10);
Â  };

Â  // FunÃ§Ã£o MODIFICADA para obter o Ãºltimo dia do mÃªs atual
Â  const getUltimoDiaMes = () => {
Â  Â  const hoje = new Date();
Â  Â  // O dia 0 do prÃ³ximo mÃªs Ã© o Ãºltimo dia do mÃªs atual
Â  Â  return new Date(hoje.getFullYear(), hoje.getMonth() + 1, 0).toISOString().slice(0, 10);
Â  };

Â  // Inicializar dataInicio e dataFim com valores padrÃ£o: 1Âº dia e Ãšltimo dia do mÃªs
Â  const [dataInicio, setDataInicio] = useState(getPrimeiroDiaMes());
Â  const [dataFim, setDataFim] = useState(getUltimoDiaMes());
Â  const [filtroAplicado, setFiltroAplicado] = useState({ inicio: getPrimeiroDiaMes(), fim: getUltimoDiaMes() });

Â  // FunÃ§Ã£o auxiliar para validar e formatar a data
Â  const getValidDateStr = (dateValue) => {
Â  Â  if (!dateValue) return null;
Â  Â  const dateObj = new Date(dateValue);
Â  Â  if (isNaN(dateObj.getTime())) {
Â  Â  Â  return null;
Â  Â  }
Â  Â  return dateObj.toISOString().slice(0, 10);
Â  };

Â  // Busca leads fechados
Â  const buscarLeadsClosedFromAPI = async () => {
Â  Â  setIsLoading(true);
Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  const respostaLeads = await fetch(
Â  Â  Â  Â  'https://script.google.com/macros/s/AKfycbyGelso1gXJEKWBCDScAyVBGPp9ncWsuUjN8XS-Cd7R8xIH7p6PWEZo2eH-WZcs99yNaA/exec?v=pegar_clientes_fechados'
Â  Â  Â  );
Â  Â  Â  const dadosLeads = await respostaLeads.json();
Â  Â  Â  setLeadsClosed(dadosLeads);
Â  Â  } catch (error) {
Â  Â  Â  console.error('Erro ao buscar leads:', error);
Â  Â  } finally {
Â  Â  Â  setIsLoading(false);
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  // refresh automÃ¡tico ao entrar na aba
Â  useEffect(() => {
Â  Â  buscarLeadsClosedFromAPI();
Â  }, []);

Â  const aplicarFiltroData = () => {
Â  Â  setFiltroAplicado({ inicio: dataInicio, fim: dataFim });
Â  };

Â  // Filtro por data dos leads gerais (vindos via prop `leads`)
Â  const leadsFiltradosPorDataGeral = leads.filter((lead) => {
Â  Â  const dataLeadStr = getValidDateStr(lead.createdAt);
Â  Â  if (!dataLeadStr) return false;
Â  Â  if (filtroAplicado.inicio && dataLeadStr < filtroAplicado.inicio) return false;
Â  Â  if (filtroAplicado.fim && dataLeadStr > filtroAplicado.fim) return false;
Â  Â  return true;
Â  });

Â  const totalLeads = leadsFiltradosPorDataGeral.length;
Â  const leadsPerdidos = leadsFiltradosPorDataGeral.filter((lead) => lead.status === 'Perdido').length;

Â  // Filtra leads fechados por responsÃ¡vel e data
Â  let leadsFiltradosClosed =
Â  Â  usuarioLogado.tipo === 'Admin'
Â  Â  Â  ? leadsClosed
Â  Â  Â  : leadsClosed.filter((lead) => lead.Responsavel === usuarioLogado.nome);

Â  leadsFiltradosClosed = leadsFiltradosClosed.filter((lead) => {
Â  Â  const dataLeadStr = getValidDateStr(lead.Data);
Â  Â  if (!dataLeadStr) return false;
Â  Â  if (filtroAplicado.inicio && dataLeadStr < filtroAplicado.inicio) return false;
Â  Â  if (filtroAplicado.fim && dataLeadStr > filtroAplicado.fim) return false;
Â  Â  return true;
Â  });

Â  // Contadores por seguradora
Â  const portoSeguro = leadsFiltradosClosed.filter((lead) => lead.Seguradora === 'Porto Seguro').length;
Â  const azulSeguros = leadsFiltradosClosed.filter((lead) => lead.Seguradora === 'Azul Seguros').length;
Â  const itauSeguros = leadsFiltradosClosed.filter((lead) => lead.Seguradora === 'Itau Seguros').length;
Â  const demais = leadsFiltradosClosed.filter((lead) => lead.Seguradora === 'Demais Seguradoras').length;

Â  // O campo Vendas soma os contadores das seguradoras
Â  const leadsFechadosCount = portoSeguro + azulSeguros + itauSeguros + demais;

Â  // Soma de prÃªmio lÃ­quido e mÃ©dia ponderada de comissÃ£o
Â  const totalPremioLiquido = leadsFiltradosClosed.reduce(
Â  Â  (acc, lead) => acc + (Number(lead.PremioLiquido) || 0),
Â  Â  0
Â  );

Â  const somaPonderadaComissao = leadsFiltradosClosed.reduce((acc, lead) => {
Â  Â  const premio = Number(lead.PremioLiquido) || 0;
Â  Â  const comissao = Number(lead.Comissao) || 0;
Â  Â  return acc + premio * (comissao / 100);
Â  }, 0);

Â  const comissaoMediaGlobal =
Â  Â  totalPremioLiquido > 0 ? (somaPonderadaComissao / totalPremioLiquido) * 100 : 0;

Â  // CÃ¡lculo: Porcentagem de Vendidos
Â  const porcentagemVendidos = totalLeads > 0 ? (leadsFechadosCount / totalLeads) * 100 : 0;

Â  return (
Â  Â  <div style={{ padding: '20px', backgroundColor: '#f9fafb', minHeight: '100vh' }}>
Â  Â  Â  <h1 style={{ color: '#1f2937', marginBottom: '20px', fontWeight: '700' }}>Dashboard de Vendas</h1>

Â  Â  Â  {/* Filtro de datas e BotÃ£o de Refresh */}
Â  Â  Â  <div
Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  display: 'flex',
Â  Â  Â  Â  Â  alignItems: 'center',
Â  Â  Â  Â  Â  gap: '12px',
Â  Â  Â  Â  Â  marginBottom: '30px',
Â  Â  Â  Â  Â  flexWrap: 'wrap',
Â  Â  Â  Â  }}
Â  Â  Â  >
Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  type="date"
Â  Â  Â  Â  Â  value={dataInicio}
Â  Â  Â  Â  Â  onChange={(e) => setDataInicio(e.target.value)}
Â  Â  Â  Â  Â  style={{ padding: '8px 12px', borderRadius: '8px', border: '1px solid #d1d5db' }}
Â  Â  Â  Â  Â  title="Data de InÃ­cio"
Â  Â  Â  Â  />
Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  type="date"
Â  Â  Â  Â  Â  value={dataFim}
Â  Â  Â  Â  Â  onChange={(e) => setDataFim(e.target.value)}
Â  Â  Â  Â  Â  style={{ padding: '8px 12px', borderRadius: '8px', border: '1px solid #d1d5db' }}
Â  Â  Â  Â  Â  title="Data de Fim"
Â  Â  Â  Â  />
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={aplicarFiltroData}
Â  Â  Â  Â  Â  style={{ backgroundColor: '#10b981', color: 'white', border: 'none', borderRadius: '8px', padding: '8px 16px', cursor: 'pointer', fontWeight: '600' }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Filtrar
Â  Â  Â  Â  </button>

Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  title='Clique para atualizar os dados'
Â  Â  Â  Â  Â  onClick={buscarLeadsClosedFromAPI}
Â  Â  Â  Â  Â  disabled={isLoading}
Â  Â  Â  Â  Â  style={{ backgroundColor: '#6b7280', color: 'white', border: 'none', borderRadius: '8px', padding: '8px 12px', cursor: 'pointer', display: 'flex', alignItems: 'center', justifyContent: 'center', minWidth: '40px', height: '40px' }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {isLoading ? (
Â  Â  Â  Â  Â  Â  <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
Â  Â  Â  Â  Â  Â  Â  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
Â  Â  Â  Â  Â  Â  Â  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <RefreshCcw size={20} />
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

Â  Â  Â  {loading && (
Â  Â  Â  Â  <div style={{ textAlign: 'center', padding: '40px', color: '#6b7280' }}>
Â  Â  Â  Â  Â  <p>Carregando dados do dashboard...</p>
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  {!loading && (
Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  {/* Primeira SeÃ§Ã£o: 3 Contadores Principais + GrÃ¡fico (Grid com 4 colunas) */}
Â  Â  Â  Â  Â  <div style={{
Â  Â  Â  Â  Â  Â  display: 'grid',
Â  Â  Â  Â  Â  Â  gridTemplateColumns: 'repeat(4, 1fr)', // 4 colunas iguais
Â  Â  Â  Â  Â  Â  gap: '20px',
Â  Â  Â  Â  Â  Â  marginBottom: '30px',
Â  Â  Â  Â  Â  }}>
Â  Â  Â  Â  Â  Â  {/* Contador: Total de Leads */}
Â  Â  Â  Â  Â  Â  <div style={{ ...compactCardStyle, minWidth: '150px' }}>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={titleTextStyle}>Total de RenovaÃ§Ãµes</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ ...valueTextStyle, color: '#1f2937' }}>{totalLeads}</p>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* Contador: Vendas */}
Â  Â  Â  Â  Â  Â  <div style={{ ...compactCardStyle, backgroundColor: '#d1fae5', border: '1px solid #a7f3d0' }}>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ ...titleTextStyle, color: '#059669' }}>Renovados</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ ...valueTextStyle, color: '#059669' }}>{leadsFechadosCount}</p>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* Contador: Leads Perdidos */}
Â  Â  Â  Â  Â  Â  <div style={{ ...compactCardStyle, backgroundColor: '#fee2e2', border: '1px solid #fca5a5' }}>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ ...titleTextStyle, color: '#ef4444' }}>Perdidos</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ ...valueTextStyle, color: '#ef4444' }}>{leadsPerdidos}</p>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* GrÃ¡fico Circular de Progresso (Ultima Coluna, Ã  Direita) */}
Â  Â  Â  Â  Â  Â  <div style={{
Â  Â  Â  Â  Â  Â  Â  Â  ...compactCardStyle,
Â  Â  Â  Â  Â  Â  Â  Â  alignItems: 'center',
Â  Â  Â  Â  Â  Â  Â  Â  justifyContent: 'center',
Â  Â  Â  Â  Â  Â  Â  Â  minWidth: '150px'
Â  Â  Â  Â  Â  Â  }}>
Â  Â  Â  Â  Â  Â  Â  Â  <h3 style={{ ...titleTextStyle, color: '#1f2937', marginBottom: '5px' }}>Taxa de RenovaÃ§Ã£o</h3>
Â  Â  Â  Â  Â  Â  Â  Â  <CircularProgressChart percentage={porcentagemVendidos} />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Segunda SeÃ§Ã£o: Contadores por Seguradora (Grid com 4 colunas) */}
Â  Â  Â  Â  Â  <h2 style={{ color: '#1f2937', marginBottom: '15px', fontSize: '18px', fontWeight: '600' }}>Vendas por Seguradora</h2>
Â  Â  Â  Â  Â  <div style={{
Â  Â  Â  Â  Â  Â  Â  display: 'grid',
Â  Â  Â  Â  Â  Â  Â  gridTemplateColumns: 'repeat(4, 1fr)', // 4 colunas iguais
Â  Â  Â  Â  Â  Â  Â  gap: '20px',
Â  Â  Â  Â  Â  Â  Â  marginBottom: '30px',
Â  Â  Â  Â  Â  }}>
Â  Â  Â  Â  Â  Â  <div style={{ ...compactCardStyle, backgroundColor: '#f0f9ff', border: '1px solid #bfdbfe' }}>
Â  Â  Â  Â  Â  Â  Â  <p style={{ ...titleTextStyle, color: '#1e40af' }}>Porto Seguro</p>
Â  Â  Â  Â  Â  Â  Â  <p style={{ ...valueTextStyle, color: '#1e40af' }}>{portoSeguro}</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div style={{ ...compactCardStyle, backgroundColor: '#f0fdf4', border: '1px solid #a7f3d0' }}>
Â  Â  Â  Â  Â  Â  Â  <p style={{ ...titleTextStyle, color: '#065f46' }}>Azul Seguros</p>
Â  Â  Â  Â  Â  Â  Â  <p style={{ ...valueTextStyle, color: '#065f46' }}>{azulSeguros}</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div style={{ ...compactCardStyle, backgroundColor: '#fff7ed', border: '1px solid #fed7aa' }}>
Â  Â  Â  Â  Â  Â  Â  <p style={{ ...titleTextStyle, color: '#92400e' }}>Itau Seguros</p>
Â  Â  Â  Â  Â  Â  Â  <p style={{ ...valueTextStyle, color: '#92400e' }}>{itauSeguros}</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div style={{ ...compactCardStyle, backgroundColor: '#f9fafb', border: '1px solid #d1d5db' }}>
Â  Â  Â  Â  Â  Â  Â  <p style={{ ...titleTextStyle, color: '#374151' }}>Demais Seguradoras</p>
Â  Â  Â  Â  Â  Â  Â  <p style={{ ...valueTextStyle, color: '#374151' }}>{demais}</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Terceira SeÃ§Ã£o: PrÃªmios e ComissÃ£o (Grid com 2 colunas) */}
Â  Â  Â  Â  Â  {usuarioLogado.tipo === 'Admin' && (
Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  <h2 style={{ color: '#1f2937', marginBottom: '15px', fontSize: '18px', fontWeight: '600' }}>MÃ©tricas Financeiras</h2>
Â  Â  Â  Â  Â  Â  <div style={{
Â  Â  Â  Â  Â  Â  Â  Â  display: 'grid',
Â  Â  Â  Â  Â  Â  Â  Â  gridTemplateColumns: 'repeat(2, 1fr)', // 2 colunas iguais
Â  Â  Â  Â  Â  Â  Â  Â  gap: '20px',
Â  Â  Â  Â  Â  Â  }}>
Â  Â  Â  Â  Â  Â  Â  <div style={{ ...compactCardStyle, backgroundColor: '#eef2ff', border: '1px solid #c7d2fe' }}>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ ...titleTextStyle, color: '#4f46e5' }}>Total PrÃªmio LÃ­quido</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ ...valueTextStyle, color: '#4f46e5' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {totalPremioLiquido.toLocaleString('pt-BR', {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style: 'currency',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  currency: 'BRL',
Â  Â  Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div style={{ ...compactCardStyle, backgroundColor: '#ecfeff', border: '1px solid #99f6e4' }}>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ ...titleTextStyle, color: '#0f766e' }}>MÃ©dia ComissÃ£o</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ ...valueTextStyle, color: '#0f766e' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {comissaoMediaGlobal.toFixed(2).replace('.', ',')}%
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </>
Â  Â  Â  )}
Â  Â  </div>
Â  );
};

export default Dashboard;
